<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Env Project</title>

    <!-- font awsome  -->
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.7.1/css/all.min.css"
      integrity="sha512-5Hs3dF2AEPkpNAR7UiOHba+lRSJNeM2ECkwxUIxC1Q/FLycGTbNapWXB4tP889k5T5Ju8fs4b1P5z/iB4nMfSQ=="
      crossorigin="anonymous"
      referrerpolicy="no-referrer"
    />

    <link href="/css/tailwind.css" rel="stylesheet" />

    <!-- Add jQuery -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script
      src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"
      integrity="sha512-VEd+nq25CkR676O+pLBnDW09R7VQX9Mdiij052gVCp5yVH3jGtH70Ho/UUv4mJDsEdTvqRCFZg0NKGiojGnUCw=="
      crossorigin="anonymous"
      referrerpolicy="no-referrer"
    ></script>
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.css"
      integrity="sha512-3pIirOrwegjM6erE5gPSwkUzO+3cTjpnV9lexlNZqvupR64iZBnOOTiiLPb9M36zpMScbmUNIcHUqKD47M719g=="
      crossorigin="anonymous"
      referrerpolicy="no-referrer"
    />

    <style>
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }

      html,
      body {
        margin: 0;
        padding: 0;
        min-height: 100vh;
        width: 100%;
        overflow-x: hidden; /* Prevents horizontal scroll */
      }

      body {
        position: relative;
        background: #0f2027;
        background: linear-gradient(to right, #2c5364, #203a43, #0f2027);
        min-height: 100vh;
      }

      body::before {
        content: "";
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-image: url("/images/pattern.svg");
        background-repeat: no-repeat;
        background-position: center;
        background-size: cover;
        opacity: 0.3;
        z-index: 1;
        pointer-events: none;
      }

      #back-to-projects {
        left: 50%; /* Horizontally center it */
        transform: translateX(
          -50%
        ); /* Offset by half of its width to achieve perfect centering */
      }
    </style>
  </head>

  <body class="font-sans p-16 h-screen">
    <a
      href="/projects"
      id="back-to-projects"
      class="text-white absolute top-2 z-0 hover:text-orange-500"
    >
      <i class="fa-solid fa-arrow-left"></i>&nbsp;&nbsp;<span
        >Back to project</span
      >
    </a>
    <!--Roles and env types wrapper -->
    <div class="flex gap-10 h-full mx-auto justify-center">
      <!-- Burger Menu -->
      <button id="burger-menu" class="md:hidden absolute top-3 left-4 z-20">
        <i class="fa-solid fa-lg fa-bars text-white"></i>
      </button>

      <!-- Sidebar -->
      <aside
        id="sidebar"
        class="fixed md:relative top-0 left-0 w-60 sm:max-w-[400px] md:w-5/12 bg-white shadow-md transform transition-transform duration-300 md:translate-x-0 -translate-x-full z-40 p-5 rounded-md overflow-y-auto"
      >
        <p class="cursor-pointer p-1 mb-8 md:hidden" id="close-sidebar">
          <i class="fa-solid fa-lg fa-x"></i>
        </p>
        <div class="flex items-center justify-between mb-4">
          <h2 class="text-lg font-bold">Roles</h2>
          <button
            id="openModalButton"
            class="p-2 bg-orange-400 text-white rounded-full hover:bg-orange-500 focus:outline-none focus:ring-2"
            aria-label="Add Role"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
              class="w-5 h-5"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M12 4v16m8-8H4"
              />
            </svg>
          </button>
        </div>
        <ul id="rolesList" class="space-y-2 mt-10 gap-5 flex flex-col">
          <li class="">
            <button
              id="userrole"
              class="w-full text-left p-2 hover:bg-gray-200 rounded-md"
            >
              Loading...
            </button>
          </li>
        </ul>
      </aside>

      <!-- Main Content -->
      <main
        class="shadow-md w-full md:w-7/12 max-w-[500px] p-3 sm:p-5 rounded-md bg-white z-20"
      >
        <div class="flex justify-between items-center mb-6">
          <h2 class="text-xl font-bold">Types of Envs</h2>
          <button
            id="open-modal-btn"
            class="bg-gray-100 border border-gray-300 text-gray-700 font-semibold p-2 sm:px-4 sm:py-2 rounded-lg shadow-sm hover:bg-gray-200 hover:shadow-md active:bg-gray-300 transition flex items-center gap-2"
          >
            <span class="">Add Admin</span>
            <i class="fa-solid fa-user-plus hidden sm:block"></i>
          </button>
        </div>

        <!-- initially when we load env using fetchEnvTypes function the env-types-container is populated with env types, but initally none of the roles button is  selected, so if we try to check in the checkbox of can view or can edit it throws an error , and also its irrelevant to show a dummy env types without any role being selected -->
        <!-- so the env-types-container-wrapper is set to hidden and only the hidden class is removed when we select a any one of the roles and its been handled in rolebutton event listener -->

        <div class="relative mt-20">
          <!-- empty envs message -->
          <p id="env-empty-message" class="text-center mt-60">
            Please select a role to display Env Types
          </p>

          <div id="env-types-container-wrapper" class="hidden">
            <!-- Headers -->

            <div class="grid grid-cols-8 gap-x-6 mb-4">
              <!-- dummy div just for grid alignment -->
              <div class="col-span-4"></div>
              <div class="col-span-2 text-sm font-semibold text-gray-600">
                View
              </div>
              <div class="col-span-2 text-sm font-semibold text-gray-600">
                Edit
              </div>
            </div>

            <!-- Row -->
            <div id="env-types-container" class="grid gap-y-4">
              <!-- Data -->
            </div>
          </div>
        </div>
      </main>
    </div>

    <!-- MODALS  -->

    <!-- Add Role Modal -->
    <div
      id="roleModal"
      class="fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center z-50 hidden"
    >
      <!--Modal Content -->
      <div
        class="bg-white w-[300px] sm:w-1/2 lg:w-1/3 p-6 rounded-lg shadow-lg"
      >
        <h2 class="text-2xl font-semibold mb-4">Add Role</h2>
        <form id="roleForm">
          <div class="mb-4">
            <label
              for="roleName"
              class="block text-sm font-medium text-gray-700"
              >Enter Role Name</label
            >
            <input
              type="text"
              id="roleName"
              name="roleName"
              class="mt-1 p-2 w-full border border-gray-300 rounded-md"
              required
            />
          </div>
          <div class="mb-4">
            <label
              for="roleDescription"
              class="block text-sm font-medium text-gray-700"
              >Enter Description</label
            >
            <textarea
              id="roleDescription"
              name="roleDescription"
              class="mt-1 p-2 w-full border border-gray-300 rounded-md"
              required
            ></textarea>
          </div>
          <div class="mb-4">
            <label
              for="roleScope"
              class="block text-sm font-medium text-gray-700"
              >Select Role Scope</label
            >
            <select
              id="roleScope"
              name="roleScope"
              class="mt-1 p-2 w-full border border-gray-300 rounded-md"
              required
            >
              <option value="organization">Organization</option>
              <option value="project">Project</option>
            </select>
          </div>
          <div class="flex justify-end gap-4">
            <button
              type="button"
              id="closeModal"
              class="bg-gray-300 text-black py-2 px-4 rounded-md hover:bg-gray-400"
            >
              Cancel
            </button>
            <button
              type="submit"
              class="bg-orange-400 text-white py-2 px-4 rounded-md hover:bg-orange-500"
            >
              Submit
            </button>
          </div>
        </form>
      </div>
    </div>

    <!-- Modal for add new admin -->
    <div
      id="env-modal"
      class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden z-50"
    >
      <div class="bg-white w-11/12 md:w-[450px] rounded-lg p-6 shadow-lg">
        <h3 class="text-2xl font-semibold mb-4">Add admin</h3>
        <div class="mb-4">
          <label for="env-type" class="block text-sm font-medium text-gray-700"
            >Select a person</label
          >
          <select
            id="env-type"
            class="w-full border border-gray-300 rounded-md p-2 mt-1"
          >
            <option id="modal-content" value="env1"></option>
          </select>
        </div>
        <div class="flex justify-end">
          <button
            id="close-modal-btn"
            class="bg-gray-300 text-gray-700 px-4 py-2 rounded-lg shadow mr-2 hover:bg-gray-400 transition"
          >
            Cancel
          </button>
          <button
            id="submit-modal-btn"
            class="bg-orange-400 text-white px-4 py-2 rounded-lg shadow hover:bg-orange-500 transition"
            onclick="submitAdmin()"
          >
            Submit
          </button>
        </div>
      </div>
    </div>

    <script>
      document.addEventListener("DOMContentLoaded", () => {
        const burgerMenu = document.getElementById("burger-menu");
        const sidebar = document.getElementById("sidebar");
        const overlay = document.createElement("div");
        const closeSidebar = document.getElementById("close-sidebar");

        overlay.classList.add(
          "fixed",
          "inset-0",
          "bg-black",
          "bg-opacity-50",
          "z-30",
          "hidden"
        );
        document.body.appendChild(overlay);

        burgerMenu.addEventListener("click", () => {
          sidebar.classList.toggle("-translate-x-full");
          overlay.classList.toggle("hidden");
        });

        closeSidebar.addEventListener("click", () => {
          sidebar.classList.add("-translate-x-full");
          overlay.classList.add("hidden");
        });

        overlay.addEventListener("click", () => {
          sidebar.classList.add("-translate-x-full");
          overlay.classList.add("hidden");
        });

        // Close sidebar when clicking outside on mobile
        window.addEventListener("resize", () => {
          if (window.innerWidth >= 768) {
            sidebar.classList.remove("-translate-x-full");
            overlay.classList.add("hidden");
          }
        });

        // window.addEventListener("resize", () => {
        //   if (window.innerWidth < 768) {
        //     overlay.classList.remove("hidden");
        //   }
        // });
      });
    </script>

    <script>
      let currentRoleId = null;
      // success and error message using toastr
      toastr.options = {
        timeOut: "2000",
      };

      //Functions to get roles
      async function fetchAndDisplayRoles() {
        try {
          const response = await fetch("/getAllRoles_toPermision");
          if (!response.ok) {
            throw new Error("Failed to fetch roles data");
          }

          const roles = await response.json();

          const rolesList = document.getElementById("rolesList");
          rolesList.innerHTML = "";

          //active list item
          let activeListItem = null;

          roles.forEach((role) => {
            const roleName =
              role.role_name.charAt(0).toUpperCase() + role.role_name.slice(1);
            const listItem = document.createElement("li");
            listItem.classList.add(
              "flex",
              "items-center",
              "justify-between",
              "p-2",
              "shadow-lg",
              "rounded-md"
            );

            // Create "role button"
            const roleButton = document.createElement("button");
            roleButton.classList.add(
              "w-full",
              "text-left",
              "p-2",
              "rounded-md"
            );
            roleButton.setAttribute("value", role.role_id);
            roleButton.innerHTML = roleName;

            roleButton.addEventListener("click", (event) => {
              // Handle background color toggle for the parent list item
              if (activeListItem) {
                activeListItem.classList.remove("bg-orange-400"); // Remove highlight from the previous list item
                activeListItem.classList.remove("text-white");
              }
              activeListItem = listItem; // Update the active list item
              listItem.classList.add("bg-orange-400"); // Highlight the clicked list item
              listItem.classList.add("text-white"); // Highlight the clicked list item

              // Call handleRoleClick function
              handleRoleClick(event);

              //removing the hidden class from the env-types-container-wrapper
              document
                .getElementById("env-types-container-wrapper")
                .classList.remove("hidden");

              document
                .getElementById("env-empty-message")
                .classList.add("hidden");
            });

            // Create "remove" button
            const removeButton = document.createElement("button");
            removeButton.innerHTML =
              '<span><i class="fa-solid  fa-trash"></i></span>';

            removeButton.classList.add("ml-2", "hover:text-red-500");
            removeButton.addEventListener("click", async (event) => {
              event.stopPropagation();
              await removeRole(role.role_id);
            });

            listItem.appendChild(roleButton);
            listItem.appendChild(removeButton);

            // Append the list item to the roles list
            rolesList.appendChild(listItem);
          });
        } catch (error) {
          console.error("Error fetching roles:", error);
        }
      }

      // Function to remove a role by its ID
      async function removeRole(roleId) {
        try {
          const response = await fetch(`/removeRole/${roleId}`, {
            method: "DELETE",
          });

          if (response.ok) {
            // alert("Role removed successfully!");
            toastr.success("Role removed successfully!");
            fetchAndDisplayRoles(); // refresh the list after removing the role
          } else {
            const error = await response.json();
            // alert(error.message || "Error removing role");
            toastr.error(error.message || "Error removing role");
          }
        } catch (error) {
          console.error("Error removing role:", error);
          // alert("An error occurred while trying to remove the role.");
          toastr.error("An error occurred while trying to remove the role.");
        }
      }

      // Function to get all env typs
      async function fetchEnvTypes() {
        try {
          const response = await fetch("/getenv/typs");
          if (!response.ok) {
            throw new Error(`HTTP error! Status: ${response.status}`);
          }

          const types = await response.json();
          console.log(types);

          const container = document.getElementById("env-types-container");
          container.innerHTML = "";

          // populate environment types with checkboxes
          types.forEach((type) => {
            const div = document.createElement("div");
            div.className = "grid grid-cols-8 gap-x-6 items-center mb-4";

            div.innerHTML = `
            <div class="text-base font-bold text-gray-800 capitalize col-span-4" data-env-id="${type.env_id}">
              ${type.env_type}
            </div>
            <input
              type="checkbox"
              class="h-5 w-5 text-orange-400 focus:ring-orange-500 rounded col-span-2"
              id="canView-${type.env_id}"
            />
            <input
              type="checkbox"
              class="h-5 w-5 text-orange-400 focus:ring-orange-500 rounded col-span-2"
              id="canEdit-${type.env_id}"
            />
          `;

            container.appendChild(div);

            //  event listeners for checkbox state changes
            const canViewCheckbox = document.getElementById(
              `canView-${type.env_id}`
            );
            const canEditCheckbox = document.getElementById(
              `canEdit-${type.env_id}`
            );

            // When canView checkbox is clicked
            canViewCheckbox.addEventListener("change", async (event) => {
              await updatePermission(
                type.env_id,
                currentRoleId,
                "can_view",
                event.target.checked ? 1 : 0
              );
            });

            // When canEdit checkbox is clicked
            canEditCheckbox.addEventListener("change", async (event) => {
              await updatePermission(
                type.env_id,
                currentRoleId,
                "can_edit",
                event.target.checked ? 1 : 0
              );
            });
          });
        } catch (error) {
          console.error("Error fetching environment types:", error);
        }
      }

      // Function to update permission table
      async function updatePermission(envId, roleId, permissionType, value) {
        try {
          // send updated permission to server
          const response = await fetch("/updatePermission", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              role_id: roleId,
              env_id: envId,
              permission_type: permissionType,
              value: value,
            }),
          });

          if (!response.ok) {
            throw new Error(`HTTP error! Status: ${response.status}`);
          }

          // response from server
          const data = await response.json();
          if (data.success) {
            // alert(data.message);
            toastr.success(data.message);
          } else {
            // alert("Error: " + data.error);
            toastr.error(data.error);
          }
        } catch (error) {
          console.error("Error updating permission:", error);
          // alert("An error occurred while updating the permission");
          toastr.error("An error occurred while updating the permission");
        }
      }

      // Function to handle role click
      async function handleRoleClick(event) {
        currentRoleId = event.target.value; // get role_id from the button's value

        // collect all env_id and env_type pairs
        const envElements = document.querySelectorAll(
          "#env-types-container > div > .text-base"
        );
        const envDetails = Array.from(envElements).map((env) => ({
          env_id: env.getAttribute("data-env-id"),
        }));

        try {
          // reset all checkboxes (deselect them)
          const canViewCheckboxes =
            document.querySelectorAll('[id^="canView-"]');
          const canEditCheckboxes =
            document.querySelectorAll('[id^="canEdit-"]');

          canViewCheckboxes.forEach((checkbox) => (checkbox.checked = false));
          canEditCheckboxes.forEach((checkbox) => (checkbox.checked = false));

          // send role_id and envDetails to server
          const response = await fetch("/getselected/permissions", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              role_id: currentRoleId,
              env_details: envDetails,
            }),
          });

          if (!response.ok) {
            throw new Error(`HTTP error! Status: ${response.status}`);
          }

          const data = await response.json(); // parse response data
          // console.log("Permissions Response:", data);

          if (data.success && data.permissions) {
            data.permissions.forEach((permission) => {
              const { env_id, can_view, can_edit } = permission;

              // update 'can_view' checkbox
              const canViewCheckbox = document.getElementById(
                `canView-${env_id}`
              );
              if (canViewCheckbox) {
                canViewCheckbox.checked = can_view === 1;
              }

              //update 'can_edit' checkbox
              const canEditCheckbox = document.getElementById(
                `canEdit-${env_id}`
              );
              if (canEditCheckbox) {
                canEditCheckbox.checked = can_edit === 1;
              }
            });
          } else {
            // If no permissions found, set checkboxes empty
            const canViewCheckboxes =
              document.querySelectorAll('[id^="canView-"]');
            const canEditCheckboxes =
              document.querySelectorAll('[id^="canEdit-"]');

            canViewCheckboxes.forEach((checkbox) => (checkbox.checked = false));
            canEditCheckboxes.forEach((checkbox) => (checkbox.checked = false));
          }
        } catch (error) {
          console.error("Error fetching permissions:", error);
        }
      }

      // call functions in sequence when the page loads
      document.addEventListener("DOMContentLoaded", async () => {
        await fetchAndDisplayRoles();
        await fetchEnvTypes();
      });

      //add new admin - model
      const openEnvModalBtn = document.getElementById("open-modal-btn");
      const closeEnveModalBtn = document.getElementById("close-modal-btn");
      const envModal = document.getElementById("env-modal");
      const modalContent = document.getElementById("modal-content");

      function openModal() {
        envModal.classList.remove("hidden");
        fetchData();
      }

      function closeModal() {
        envModal.classList.add("hidden");
      }

      // Function to fetch data and display on modal
      async function fetchData() {
        try {
          const response = await fetch("/getAllUsers_AllRoles", {
            method: "GET",
            headers: {
              "Content-Type": "application/json",
            },
          });

          if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
          }

          const data = await response.json();
          // console.log('Fetched Data:', data);

          const selectElement = document.getElementById("env-type");

          // cler any existing options
          selectElement.innerHTML = "";

          // default placeholder option
          const placeholderOption = document.createElement("option");
          placeholderOption.value = "";
          placeholderOption.textContent = "Select an organizer";
          placeholderOption.disabled = true;
          placeholderOption.selected = true;
          selectElement.appendChild(placeholderOption);

          // options append
          data.users.forEach((user) => {
            if (user.role_scope !== "organization") {
              const option = document.createElement("option");
              option.value = user.user_id;
              option.textContent = user.username;
              selectElement.appendChild(option);
            }
          });
        } catch (error) {
          console.error("Error fetching data:", error);
          modalContent.textContent = "Failed to fetch data.";
        }
      }

      // submitAdmin function
      async function submitAdmin() {
        try {
          // get selected user_id from the dropdown
          const selectElement = document.getElementById("env-type");
          const selectedUserId = selectElement.value;

          if (!selectedUserId) {
            // alert("Please select an organizer.");
            toastr.warning("Please select an organizer");
            return;
          }

          const response = await fetch("/postnew_admin", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({ user_id: selectedUserId }),
          });

          if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
          }

          const result = await response.json();
          // console.log("Post result:", result);

          // alert("Admin added successfully!");
          toastr.success("Admin added successfully!");
          document.getElementById("env-modal").classList.add("hidden"); // close modal
        } catch (error) {
          console.error("Error posting new admin:", error);
          // alert("Failed to add admin. Please try again");
          toastr.error("Failed to add admin. Please try again");
        }
      }

      //event listener
      openEnvModalBtn.addEventListener("click", openModal);
      closeEnveModalBtn.addEventListener("click", closeModal);

      // close modal - clicking outside
      envModal.addEventListener("click", (event) => {
        if (event.target === envModal) {
          closeModal();
        }
      });
    </script>

    <!-- add roles -->
    <script>
      const openRoleModalButton = document.getElementById("openModalButton");
      const closeRoleModalButton = document.getElementById("closeModal");
      const roleModal = document.getElementById("roleModal");
      const roleForm = document.getElementById("roleForm");

      // Function to open the modal
      openRoleModalButton.addEventListener("click", () => {
        roleModal.classList.remove("hidden");
      });

      // Function to close the modal
      closeRoleModalButton.addEventListener("click", () => {
        roleModal.classList.add("hidden");
      });

      roleModal.addEventListener("click", (event) => {
        if (event.target === roleModal) {
          roleModal.classList.add("hidden");
        }
      });

      // Handle form submission
      roleForm.addEventListener("submit", async (event) => {
        event.preventDefault();

        const formData = new FormData(roleForm);
        const data = {
          roleName: formData.get("roleName"),
          roleDescription: formData.get("roleDescription"),
          roleScope: formData.get("roleScope"),
        };

        try {
          const response = await fetch("/addNewRoles", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify(data),
          });

          if (response.ok) {
            const result = await response.json();
            // alert(result.message || "Role added successfully!");
            toastr.success(result.message || "Role added successfully!");
            location.reload(); // Refresh the page after the alert
          } else {
            const error = await response.json();
            alert(error.message || "Error adding role.");
            toastr.error(error.message || "Error adding role");
          }
        } catch (error) {
          console.error("Error during form submission:", error);
          // alert("An unexpected error occurred. Please try again");
          toastr.error("An unexpected error occurred. Please try again");
        }
      });
    </script>
  </body>
</html>
