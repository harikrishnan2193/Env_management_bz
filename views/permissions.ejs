<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Env Project</title>
    <!-- font awsome  -->
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.7.1/css/all.min.css"
      integrity="sha512-5Hs3dF2AEPkpNAR7UiOHba+lRSJNeM2ECkwxUIxC1Q/FLycGTbNapWXB4tP889k5T5Ju8fs4b1P5z/iB4nMfSQ=="
      crossorigin="anonymous"
      referrerpolicy="no-referrer"
    />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css"
      integrity="sha512-Kc323vGBEqzTmouAECnVceyQqyqdsSiqLQISBL29aUW4U/M7pSPA/gEUZQqv1cwx4OnYxTxve5UMg5GT6L4JJg=="
      crossorigin="anonymous"
      referrerpolicy="no-referrer"
    />
    <link href="/css/tailwind.css" rel="stylesheet" />
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <!-- Add jQuery -->
    <script
      src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"
      integrity="sha512-VEd+nq25CkR676O+pLBnDW09R7VQX9Mdiij052gVCp5yVH3jGtH70Ho/UUv4mJDsEdTvqRCFZg0NKGiojGnUCw=="
      crossorigin="anonymous"
      referrerpolicy="no-referrer"
    ></script>
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.css"
      integrity="sha512-3pIirOrwegjM6erE5gPSwkUzO+3cTjpnV9lexlNZqvupR64iZBnOOTiiLPb9M36zpMScbmUNIcHUqKD47M719g=="
      crossorigin="anonymous"
      referrerpolicy="no-referrer"
    />
  </head>

  <body class="bg-gray-100 font-sans">
    <div class="flex h-screen">
      <!-- Sidebar -->
      <aside class="w-1/4 bg-white shadow-md p-4">
        <div class="flex items-center justify-between mb-4">
          <h2 class="text-lg font-bold">Roles</h2>
          <button
            id="openModalButton"
            class="p-2 bg-blue-600 text-white rounded-full hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-400"
            aria-label="Add Role"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
              class="w-5 h-5"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M12 4v16m8-8H4"
              />
            </svg>
          </button>
        </div>
        <ul id="rolesList" class="space-y-2">
          <li>
            <button
              id="userrole"
              class="w-full text-left p-2 hover:bg-gray-200 rounded-md"
            >
              Loading...
            </button>
          </li>
        </ul>
      </aside>

      <!-- Modal -->
      <div
        id="roleModal"
        class="fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center z-50 hidden"
      >
        <!-- Modal Content -->
        <div class="bg-white w-full max-w-lg p-6 rounded-lg shadow-lg">
          <h2 class="text-2xl font-semibold mb-4">Add Role</h2>
          <form id="roleForm">
            <div class="mb-4">
              <label
                for="roleName"
                class="block text-sm font-medium text-gray-700"
                >Enter Role Name</label
              >
              <input
                type="text"
                id="roleName"
                name="roleName"
                class="mt-1 p-2 w-full border border-gray-300 rounded-md"
                required
              />
            </div>
            <div class="mb-4">
              <label
                for="roleDescription"
                class="block text-sm font-medium text-gray-700"
                >Enter Description</label
              >
              <textarea
                id="roleDescription"
                name="roleDescription"
                class="mt-1 p-2 w-full border border-gray-300 rounded-md"
                required
              ></textarea>
            </div>
            <div class="mb-4">
              <label
                for="roleScope"
                class="block text-sm font-medium text-gray-700"
                >Select Role Scope</label
              >
              <select
                id="roleScope"
                name="roleScope"
                class="mt-1 p-2 w-full border border-gray-300 rounded-md"
                required
              >
                <option value="organization">Organization</option>
                <option value="project">Project</option>
              </select>
            </div>
            <div class="flex justify-between">
              <button
                type="submit"
                class="bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700"
              >
                Submit
              </button>
              <button
                type="button"
                id="closeModal"
                class="bg-gray-300 text-black py-2 px-4 rounded-md hover:bg-gray-400"
              >
                Cancel
              </button>
            </div>
          </form>
        </div>
      </div>

      <!-- Main Content -->
      <main class="w-3/4 bg-white shadow-md m-4 p-6 rounded-lg relative">
        <div class="flex justify-between items-center mb-6">
          <h2 class="text-lg font-bold">Types of Envs</h2>
          <button
            id="open-modal-btn"
            class="bg-gray-100 border border-gray-300 text-gray-700 font-semibold text-lg px-4 py-2 rounded-lg shadow-sm hover:bg-gray-200 hover:shadow-md active:bg-gray-300 transition flex items-center gap-2"
          >
            <i class="fa-solid fa-user-tie text-xl"></i>
            Add New
          </button>
        </div>

        <div>
          <!-- Headers -->
          <div class="grid grid-cols-3 gap-x-6 mb-4">
            <div></div>
            <div class="text-sm font-semibold text-gray-600">View</div>
            <div class="text-sm font-semibold text-gray-600">Edit</div>
          </div>

          <!-- Row -->
          <div id="env-types-container" class="grid gap-y-4">
            <!-- Data -->
          </div>
        </div>
      </main>

      <!-- Modal for add new admin -->
      <div
        id="env-modal"
        class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden z-50"
      >
        <div class="bg-white w-1/3 rounded-lg p-6 shadow-lg">
          <h3 class="text-lg font-bold mb-4">Add admin</h3>
          <div class="mb-4">
            <label
              for="env-type"
              class="block text-sm font-medium text-gray-700"
              >Select a organizer</label
            >
            <select
              id="env-type"
              class="w-full border border-gray-300 rounded-md p-2 mt-1"
            >
              <option id="modal-content" value="env1"></option>
            </select>
          </div>
          <div class="flex justify-end">
            <button
              id="close-modal-btn"
              class="bg-gray-300 text-gray-700 px-4 py-2 rounded-lg shadow mr-2 hover:bg-gray-400 transition"
            >
              Cancel
            </button>
            <button
              id="submit-modal-btn"
              class="bg-blue-500 text-white px-4 py-2 rounded-lg shadow hover:bg-blue-600 transition"
              onclick="submitAdmin()"
            >
              Submit
            </button>
          </div>
        </div>
      </div>
    </div>

    <script>
      let currentRoleId = null;

      //Functions to get roles
      async function fetchAndDisplayRoles() {
        try {
          const response = await fetch("/getAllRoles_toPermision");
          if (!response.ok) {
            throw new Error("Failed to fetch roles data");
          }

          const roles = await response.json();

          const rolesList = document.getElementById("rolesList");
          rolesList.innerHTML = "";

          // add roles
          roles.forEach((role) => {
            const roleName =
              role.role_name.charAt(0).toUpperCase() + role.role_name.slice(1);
            const listItem = document.createElement("li");
            listItem.classList.add(
              "flex",
              "items-center",
              "justify-between",
              "p-2"
            );

            // create "role button"
            const roleButton = document.createElement("button");
            roleButton.classList.add(
              "w-full",
              "text-left",
              "p-2",
              "hover:bg-gray-200",
              "rounded-md"
            );
            roleButton.setAttribute("value", role.role_id);
            roleButton.innerHTML = roleName;
            roleButton.addEventListener("click", (event) =>
              handleRoleClick(event)
            );

            // create "remove" button
            const removeButton = document.createElement("button");
            removeButton.innerHTML = "✖️";
            removeButton.classList.add(
              "text-red-500",
              "ml-2",
              "hover:text-red-700"
            );
            removeButton.addEventListener("click", async (event) => {
              event.stopPropagation();
              await removeRole(role.role_id);
            });

            listItem.appendChild(roleButton);
            listItem.appendChild(removeButton);

            // append the list item to the roles list
            rolesList.appendChild(listItem);
          });
        } catch (error) {
          console.error("Error fetching roles:", error);
        }
      }

      // Function to remove a role by its ID
      async function removeRole(roleId) {
        try {
          const response = await fetch(`/removeRole/${roleId}`, {
            method: "DELETE",
          });

          if (response.ok) {
            alert("Role removed successfully!");
            fetchAndDisplayRoles(); // refresh the list after removing the role
          } else {
            const error = await response.json();
            alert(error.message || "Error removing role");
          }
        } catch (error) {
          console.error("Error removing role:", error);
          alert("An error occurred while trying to remove the role.");
        }
      }

      // Function to get all env typs
      async function fetchEnvTypes() {
        try {
          const response = await fetch("/getenv/typs");
          if (!response.ok) {
            throw new Error(`HTTP error! Status: ${response.status}`);
          }

          const types = await response.json();

          const container = document.getElementById("env-types-container");
          container.innerHTML = "";

          // populate environment types with checkboxes
          types.forEach((type) => {
            const div = document.createElement("div");
            div.className = "grid grid-cols-3 gap-x-6 items-center mb-4";

            div.innerHTML = `
            <div class="text-base font-bold text-gray-800" data-env-id="${type.env_id}">
              ${type.env_type}
            </div>
            <input 
              type="checkbox" 
              class="h-5 w-5 text-blue-600 focus:ring-blue-500 rounded" 
              id="canView-${type.env_id}"  
            />
            <input 
              type="checkbox" 
              class="h-5 w-5 text-blue-600 focus:ring-blue-500 rounded" 
              id="canEdit-${type.env_id}"  
            />
          `;

            container.appendChild(div);

            //  event listeners for checkbox state changes
            const canViewCheckbox = document.getElementById(
              `canView-${type.env_id}`
            );
            const canEditCheckbox = document.getElementById(
              `canEdit-${type.env_id}`
            );

            // When canView checkbox is clicked
            canViewCheckbox.addEventListener("change", async (event) => {
              await updatePermission(
                type.env_id,
                currentRoleId,
                "can_view",
                event.target.checked ? 1 : 0
              );
            });

            // When canEdit checkbox is clicked
            canEditCheckbox.addEventListener("change", async (event) => {
              await updatePermission(
                type.env_id,
                currentRoleId,
                "can_edit",
                event.target.checked ? 1 : 0
              );
            });
          });
        } catch (error) {
          console.error("Error fetching environment types:", error);
        }
      }

      // Function to update permission table
      async function updatePermission(envId, roleId, permissionType, value) {
        try {
          // send updated permission to server
          const response = await fetch("/updatePermission", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              role_id: roleId,
              env_id: envId,
              permission_type: permissionType,
              value: value,
            }),
          });

          if (!response.ok) {
            throw new Error(`HTTP error! Status: ${response.status}`);
          }

          // response from server
          const data = await response.json();
          if (data.success) {
            alert(data.message);
          } else {
            alert("Error: " + data.error);
          }
        } catch (error) {
          console.error("Error updating permission:", error);
          alert("An error occurred while updating the permission");
        }
      }

      // Function to handle role click
      async function handleRoleClick(event) {
        currentRoleId = event.target.value; // get role_id from the button's value

        // collect all env_id and env_type pairs
        const envElements = document.querySelectorAll(
          "#env-types-container > div > .text-base"
        );
        const envDetails = Array.from(envElements).map((env) => ({
          env_id: env.getAttribute("data-env-id"),
        }));

        try {
          // reset all checkboxes (deselect them)
          const canViewCheckboxes =
            document.querySelectorAll('[id^="canView-"]');
          const canEditCheckboxes =
            document.querySelectorAll('[id^="canEdit-"]');

          canViewCheckboxes.forEach((checkbox) => (checkbox.checked = false));
          canEditCheckboxes.forEach((checkbox) => (checkbox.checked = false));

          // send role_id and envDetails to server
          const response = await fetch("/getselected/permissions", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              role_id: currentRoleId,
              env_details: envDetails,
            }),
          });

          if (!response.ok) {
            throw new Error(`HTTP error! Status: ${response.status}`);
          }

          const data = await response.json(); // parse response data
          console.log("Permissions Response:", data);

          if (data.success && data.permissions) {
            data.permissions.forEach((permission) => {
              const { env_id, can_view, can_edit } = permission;

              // update 'can_view' checkbox
              const canViewCheckbox = document.getElementById(
                `canView-${env_id}`
              );
              if (canViewCheckbox) {
                canViewCheckbox.checked = can_view === 1;
              }

              //update 'can_edit' checkbox
              const canEditCheckbox = document.getElementById(
                `canEdit-${env_id}`
              );
              if (canEditCheckbox) {
                canEditCheckbox.checked = can_edit === 1;
              }
            });
          } else {
            // If no permissions found, set checkboxes empty
            const canViewCheckboxes =
              document.querySelectorAll('[id^="canView-"]');
            const canEditCheckboxes =
              document.querySelectorAll('[id^="canEdit-"]');

            canViewCheckboxes.forEach((checkbox) => (checkbox.checked = false));
            canEditCheckboxes.forEach((checkbox) => (checkbox.checked = false));
          }
        } catch (error) {
          console.error("Error fetching permissions:", error);
        }
      }

      // call functions in sequence when the page loads
      document.addEventListener("DOMContentLoaded", async () => {
        await fetchAndDisplayRoles();
        await fetchEnvTypes();
      });

      //add new admin - model
      const openModalBtn = document.getElementById("open-modal-btn");
      const closeModalBtn = document.getElementById("close-modal-btn");
      const envModal = document.getElementById("env-modal");
      const modalContent = document.getElementById("modal-content");

      function openModal() {
        envModal.classList.remove("hidden");
        fetchData();
      }

      function closeModal() {
        envModal.classList.add("hidden");
      }

      // Function to fetch data and display on modal
      async function fetchData() {
        try {
          const response = await fetch("/getAllUsers_AllRoles", {
            method: "GET",
            headers: {
              "Content-Type": "application/json",
            },
          });

          if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
          }

          const data = await response.json();
          // console.log('Fetched Data:', data);

          const selectElement = document.getElementById("env-type");

          // cler any existing options
          selectElement.innerHTML = "";

          // default placeholder option
          const placeholderOption = document.createElement("option");
          placeholderOption.value = "";
          placeholderOption.textContent = "Select an organizer";
          placeholderOption.disabled = true;
          placeholderOption.selected = true;
          selectElement.appendChild(placeholderOption);

          // options append
          data.users.forEach((user) => {
            if (user.role_scope !== "organization") {
              const option = document.createElement("option");
              option.value = user.user_id;
              option.textContent = user.username;
              selectElement.appendChild(option);
            }
          });
        } catch (error) {
          console.error("Error fetching data:", error);
          modalContent.textContent = "Failed to fetch data.";
        }
      }

      // submitAdmin function
      async function submitAdmin() {
        try {
          // get selected user_id from the dropdown
          const selectElement = document.getElementById("env-type");
          const selectedUserId = selectElement.value;

          if (!selectedUserId) {
            alert("Please select an organizer.");
            return;
          }

          // POST request
          const response = await fetch("/postnew_admin", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({ user_id: selectedUserId }),
          });

          if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
          }

          const result = await response.json();
          console.log("Post result:", result);

          alert("Admin added successfully!");
          document.getElementById("env-modal").classList.add("hidden"); // close modal
        } catch (error) {
          console.error("Error posting new admin:", error);
          alert("Failed to add admin. Please try again.");
        }
      }

      //event listener
      openModalBtn.addEventListener("click", openModal);
      closeModalBtn.addEventListener("click", closeModal);

      // close modal - clicking outside
      envModal.addEventListener("click", (event) => {
        if (event.target === envModal) {
          closeModal();
        }
      });
    </script>

    <!-- add roles -->
    <script>
      const openModalButton = document.getElementById("openModalButton");
      const closeModalButton = document.getElementById("closeModal");
      const roleModal = document.getElementById("roleModal");
      const roleForm = document.getElementById("roleForm");

      // Function to open the modal
      openModalButton.addEventListener("click", () => {
        roleModal.classList.remove("hidden");
      });

      // Function to close the modal
      closeModalButton.addEventListener("click", () => {
        roleModal.classList.add("hidden");
      });

      // Handle form submission
      roleForm.addEventListener("submit", async (event) => {
        event.preventDefault();

        const formData = new FormData(roleForm);
        const data = {
          roleName: formData.get("roleName"),
          roleDescription: formData.get("roleDescription"),
          roleScope: formData.get("roleScope"),
        };

        try {
          const response = await fetch("/addNewRoles", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify(data),
          });

          // Check if the response is successful
          if (response.ok) {
            const result = await response.json();
            alert(result.message || "Role added successfully!");
            location.reload(); // Refresh the page after the alert
          } else {
            const error = await response.json();
            alert(error.message || "Error adding role.");
          }
        } catch (error) {
          console.error("Error during form submission:", error);
          alert("An unexpected error occurred. Please try again.");
        }
      });
    </script>
  </body>
</html>
