<!DOCTYPE html>
<html lang="en">
  <head>
    <%- include('partials/head', { title: "Permissions"}) %>
  </head>
  <body class="p-4 md:p-0" style="z-index: 100">
    <!--!Modal -->
    <div
      id="edit-modal"
      class="fixed inset-0 z-50 hidden flex items-center justify-center bg-black bg-opacity-50"
    >
      <div class="bg-medium_grey w-96 p-6 rounded-lg shadow-lg text-secondary">
        <h2 class="text-lg font-semibold mb-4">Edit Permission</h2>
        <form id="edit-form">
          <div class="mb-4">
            <label for="modal-envType" class="block text-sm font-medium"
              >Environment Type</label
            >
            <input
              id="modal-envType"
              name="modal-envType"
              type="text"
              class="mt-1 block w-full p-2 border border-dark_grey rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-primary"
            />
          </div>
          <div class="mb-4">
            <label for="modal-description" class="block text-sm font-medium"
              >Description</label
            >
            <input
              id="modal-description"
              name="modal-description"
              type="text"
              class="mt-1 block w-full p-2 border border-dark_grey rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-primary"
            />
          </div>
          <div class="flex justify-end">
            <button
              type="button"
              id="close-modal"
              class="bg-dark_grey text-light_grey px-4 py-2 rounded-lg shadow mr-2 hover:bg-darker_grey transition"
            >
              Cancel
            </button>
            <button
              type="submit"
              id="update-permission-btn"
              class="bg-primary text-light_grey px-4 py-2 rounded-lg shadow hover:bg-primary_hover transition"
            >
              Update
            </button>
          </div>
        </form>
      </div>
    </div>

    <!-- Add Permissions -->
    <div
      class="max-w-4xl mx-auto mt-10 p-5 bg-medium_grey shadow-md text-secondary rounded-lg relative z-1"
    >
      <div class="flex justify-between gap-4">
        <div class="flex flex-col gap-2 grow">
          <input
            type="text"
            placeholder="Enter permission type"
            class="add-permission-input w-full px-4 py-2 border border-dark_grey rounded-lg focus:outline-none focus:ring-2 focus:ring-primary"
          />
          <input
            type="text"
            placeholder="Enter permission description"
            class="add-description-input w-full px-4 py-2 border border-dark_grey rounded-lg focus:outline-none focus:ring-2 focus:ring-primary"
          />
        </div>

        <button
          class="add-permission-btn px-6 py-2 bg-primary hover:bg-primary_hover text-white text-sm font-semibold rounded-lg shadow-md focus:outline-none"
        >
          Add Permission
        </button>
      </div>
    </div>

    <!-- Render Permissions Dynamically -->
    <% if (data && data.length > 0) { %>
    <div
      class="max-w-4xl mx-auto mt-10 p-2 sm:p-5 bg-medium_grey shadow-md text-secondary rounded-lg relative z-10 capitalize mb-5"
    >
      <h1 class="text-2xl font-bold mb-5 text-center">Permissions</h1>
      <ul class="space-y-4">
        <% data.forEach(permission => { %>
        <div
          class="flex items-center justify-between p-4 bg-light_grey rounded-lg shadow-md"
        >
          <div>
            <span class="block text-lg font-medium"
              ><%= permission.env_type %></span
            >
            <span class="text-sm hidden sm:block"
              ><%= permission.description %></span
            >
          </div>

          <div>
            <button
              class="edit-permission-btn px-4 py-2 bg-primary text-light_grey text-sm font-semibold rounded-lg shadow-md hover:bg-primary_hover"
              data-id="<%= permission.env_id %>"
              data-env-type="<%= permission.env_type %>"
              data-description="<%= permission.description %>"
            >
              Edit
            </button>
            <button
              class="delete-permission-btn px-4 py-2 bg-darker_grey text-light_grey text-sm font-semibold rounded-lg shadow-md hover:bg-red-500"
              data-id="<%= permission.env_id %>"
            >
              Delete
            </button>
          </div>
        </div>
        <% }) %>
      </ul>
    </div>

    <% } else { %>
    <p class="text-2xl font-semibold">No permissions found.</p>
    <% } %>

    <div class="flex justify-center py-5">
      <a
        href="/superadmin/permission"
        id="back-to-projects"
        class="text-light_grey z-0 hover:text-primary"
      >
        <i class="fa-solid fa-arrow-left"></i>&nbsp;&nbsp;<span
          >Back to Permissions</span
        >
      </a>
    </div>
  </body>

  <!--!Permission Adding & Deleting Functionality -->
  <script>
    const addPermissionBtn = document.querySelector(".add-permission-btn");
    const deletePermissionBtns = document.querySelectorAll(
      ".delete-permission-btn"
    );

    deletePermissionBtns.forEach((button) => {
      button.addEventListener("click", () => {
        const id = button.getAttribute("data-id"); // get env_id from data attribute
        handleDeletePermission(id);
      });
    });

    addPermissionBtn.addEventListener("click", () => {
      if (document.querySelector(".add-permission-input").value === "") {
        toastr.error("Permission input is empty! Try again!");
        return;
      }

      if (document.querySelector(".add-description-input").value === "") {
        toastr.error("Description input is empty! Try again!");
        return;
      }

      handleAddPermission();
    });

    // handle Delete request
    async function handleDeletePermission(id) {
      console.log("checking the id passed correctly");
      try {
        const response = await fetch(`/deletePermission/${id}`, {
          method: "DELETE",
        });

        const result = await response.json();
        console.log(result);

        if (response.ok) {
          // alert("Permission deleted successfully!");
          toastr.success("Permission deleted successfully!");
          setTimeout(() => {
            location.reload(); // Reload the page to reflect the deletion
          }, 2000);
          // location.reload(); // Reload the page to reflect the deletion
        } else {
          //server errors
          if (result.error === "already in use") {
            toastr.error(result.msg);
          } else {
            // alert("Failed to delete permission. Please try again.");
            toastr.error("Failed to delete permission. Please try again.");
          }
        }
      } catch (error) {
        // console.log("An unexpected error occurred. Please try again.", error);
        toastr.error("An unexpected error occurred. Please try again.");
      }
    }

    // handle add request
    async function handleAddPermission() {
      const permissionInput = document.querySelector(
        ".add-permission-input"
      ).value;

      const descriptionInput = document.querySelector(
        ".add-description-input"
      ).value;

      console.log(permissionInput);

      try {
        const response = await fetch("/addNewPermission", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            permissionType: permissionInput,
            descriptionInput: descriptionInput,
          }),
        });

        const result = await response.json();
        console.log(result);

        if (response.ok) {
          // alert("Permission added successfully!");
          toastr.success("Permission added successfully!");
          setTimeout(() => {
            location.reload();
          }, 2000);
          // location.reload(); // Reload the page to reflect the addition
        } else {
          toastr.error("Failed to add permission. Please try again.");
          // alert("Failed to add permission. Please try again.");
        }
      } catch (error) {
        console.log("Error:", error);
      }
    }
  </script>

  <!--!Permission Updating Functionality -->
  <script>
    document.addEventListener("DOMContentLoaded", () => {
      const modal = document.getElementById("edit-modal");
      const closeModalBtn = document.getElementById("close-modal");
      const modalEnvTypeInput = document.getElementById("modal-envType");
      const modaldescriptionInput =
        document.getElementById("modal-description");
      const updatePermissionBtn = document.getElementById(
        "update-permission-btn"
      );
      let currentPermissionId = null; // id of the permission that we want to edit

      document.querySelectorAll(".edit-permission-btn").forEach((button) => {
        button.addEventListener("click", () => {
          const envType = button.getAttribute("data-env-type");
          const description = button.getAttribute("data-description");
          currentPermissionId = button.getAttribute("data-id");

          // Populate the modal inputs with current values
          modalEnvTypeInput.value = envType;
          modaldescriptionInput.value = description;

          modal.classList.remove("hidden");
        });
      });

      closeModalBtn.addEventListener("click", () => {
        modal.classList.add("hidden");
      });

      // Handle update request
      updatePermissionBtn.addEventListener("click", async (e) => {
        e.preventDefault(); // Prevent default form submission

        const updatedEnvType = modalEnvTypeInput.value;
        const updatedDescription = modaldescriptionInput.value;

        try {
          const response = await fetch(
            `/updatePermission/${currentPermissionId}`,
            {
              method: "PUT",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({
                env_type: updatedEnvType,
                description: updatedDescription,
              }),
            }
          );

          if (response.ok) {
            // alert("Permission updated successfully!");
            toastr.success("Permission updated successfully!");
            modal.classList.add("hidden"); //close modal after updation
            setTimeout(() => {
              window.location.reload(); // Reload the page to reflect changes
            }, 2000);
            // window.location.reload(); // Reload the page to reflect changes
          } else {
            const errorData = await response.json();
            toastr.error(`Error: ${errorData.error}`);
            // alert(`Error: ${errorData.error}`);
          }
        } catch (error) {
          console.error("Error updating permission:", error);
        }
      });

      // handle outside click of the modal
      modal.addEventListener("click", (e) => {
        if (e.target === modal) {
          modal.classList.add("hidden");
        }
      });
    });
  </script>
</html>
