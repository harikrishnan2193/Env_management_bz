<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Project Support</title>

  <!-- SweetAlert -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css"
    integrity="sha512-Kc323vGBEqzTmouAECnVceyQqyqdsSiqLQISBL29aUW4U/M7pSPA/gEUZQqv1cwx4OnYxTxve5UMg5GT6L4JJg=="
    crossorigin="anonymous" referrerpolicy="no-referrer" />

  <link href="/css/tailwind.css" rel="stylesheet" />
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <!-- Add jQuery -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"
    integrity="sha512-VEd+nq25CkR676O+pLBnDW09R7VQX9Mdiij052gVCp5yVH3jGtH70Ho/UUv4mJDsEdTvqRCFZg0NKGiojGnUCw=="
    crossorigin="anonymous" referrerpolicy="no-referrer"></script>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.css"
    integrity="sha512-3pIirOrwegjM6erE5gPSwkUzO+3cTjpnV9lexlNZqvupR64iZBnOOTiiLPb9M36zpMScbmUNIcHUqKD47M719g=="
    crossorigin="anonymous" referrerpolicy="no-referrer" />

  <!-- tailwind cdn -->
  <script src="https://cdn.tailwindcss.com"></script>

  <style>
    body {
      background: #0f2027;
      /* fallback for old browsers */
      background: -webkit-linear-gradient(to right,
          #2c5364,
          #203a43,
          #0f2027);
      /* Chrome 10-25, Safari 5.1-6 */
      background: linear-gradient(to right, #2c5364, #203a43, #0f2027);
    }

    .modal {
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100vh;
      background: rgba(0, 0, 0, 0.5);
      justify-content: center;
      align-items: center;
    }

    .modal-content {
      background: #fff;
      padding: 20px;
      border-radius: 8px;
      width: 300px;
      max-width: 90%;
      text-align: center;
    }

    .hidden {
      display: none;
    }

    #selectedOption {
      margin: 0 !important;
      padding: 0 !important;
    }
  </style>
</head>

<body>
  <!-- SIDEBAR SECTION -->
  <section class="">
    <%- include('side', { roleDetails: roleDetails }) %>
  </section>

  <div class="min-h-screen flex gap-1 ">
    <!-- CONTENT SECTION -->
    <section class="relative flex-1 z-10">
      <div class="flex flex-col items-center justify-center space-y-6 mt-10">
        <!-- back to project -->
        <a href="/projects" class="text-white absolute top-3 z-0 hover:text-orange-500">
          <i class="fa-solid fa-arrow-left"></i>&nbsp;&nbsp;<span>Back to project</span>
        </a>

        <form id="projectEnvForm" action="/project/env_type/envs" method="GET">
          <select id="options" name="env_id"
            class="w-72 px-2 py-1 text-gray-700 bg-white border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-orange-500"
            onchange="this.form.submit()">
            <option value="" disabled selected>Select Env</option>
            <% envStatus.forEach(project=> { %>
              <option value="<%= project.env_id %>">
                <%= project.env_type %>
              </option>
              <% }) %>
          </select>
        </form>

        <!-- alert messages -->
        <script>
          const error =  <%- JSON.stringify(error) %>;
          const success =  <%- JSON.stringify(success) %>;

          // success and error message using toastr
          toastr.options = {
            timeOut: "2000",
          };

          if (success && success.length > 0) {
            toastr.success(success[0]);
          }

          if (error && error.length > 0) {
            toastr.error(error[0]);
          }
        </script>

        <!-- Container -->
        <div class="xs:w-11/12 sm:w-10/12 lg:w-7/12 bg-white text-black p-2 sm:p-6 shadow-lg rounded-lg relative">
          <h2 class="text-xl md:text-2xl font-bold mb-2 sm:mb-4 text-center text-gray-900">

            Env Types
          </h2>
          <!-- Form to handle environment updates -->
          <form action="/project/updateEnvs" method="POST" id="envForm">

            <!-- textare ,render placeholder -->
            <% if (allEnvs && allEnvs.length> 0) { %>
              <% allEnvs.forEach(env=> { %>
                <% let placeholderText='' ; if (typeof canEdit !=='undefined' && canEdit) {
                  placeholderText='No env available. Type here...' ; } else if (typeof canView !=='undefined' &&
                  canView) { placeholderText='No env available' ; } else { placeholderText='No access to view content' ;
                  } const readonlyAttribute=(typeof canEdit !=='undefined' && canEdit) ? '' : 'readonly' ; %>
                  <div class="bg-gray-200 p-4 rounded-lg mb-5 h-60 shadow-inner min-h-[550px]">
                    <textarea name="env_content"
                      class="w-full h-full bg-gray-200 border border-gray-300 rounded-lg p-4 resize-none text-gray-700 focus:outline-none focus:ring-2 focus:ring-orange-400 transition-shadow shadow-sm"
                      <%=readonlyAttribute %>
                      placeholder="<%= placeholderText %>"><%- (typeof canView !== 'undefined' && canView) || (typeof canEdit !== 'undefined' && canEdit) ? (env.env_content || '') : '' %></textarea>
                  </div>
                  <% }) %>
                    <% } else { %>
                      <% let placeholderText='' ; if (typeof canEdit !=='undefined' && canEdit) {
                        placeholderText='No env available. Type here...' ; } else if (typeof canView !=='undefined' &&
                        canView) { placeholderText='No env available' ; } else {
                        placeholderText='No access to view content' ; } const readonlyAttribute=(typeof canEdit
                        !=='undefined' && canEdit) ? '' : 'readonly' ; %>
                        <div class="bg-gray-200 p-4 rounded-lg mb-5 h-60 shadow-inner min-h-[550px]">
                          <textarea name="env_content"
                            class="w-full h-full bg-gray-200 border border-gray-300 rounded-lg p-4 resize-none text-gray-700 focus:outline-none focus:ring-2 focus:ring-orange-400 transition-shadow shadow-sm"
                            <%=readonlyAttribute %>
                            placeholder="<%= placeholderText %>"><%- '' %></textarea>
                        </div>
                        <% } %>


                          <!-- Button -->
                          <div class="text-center mb-2">
                            <button type="submit"
                              class="w-full bg-orange-400 text-white font-bold rounded-md py-2 hover:bg-orange-500"
                              <%=(typeof canEdit !=='undefined' && !canEdit) ? 'disabled' : '' %>>Save Env</button>
                          </div>
          </form>
        </div>

      </div>
    </section>
  </div>

  <script>
    // let loggedInUserId;
    toastr.options = {
      timeOut: "2000",
    };


    //open main model
    async function openModal(event) {
      event.preventDefault();

      try {
        // fetch user and role data from server
        const response = await fetch("/getAllUsers_AllRoles");
        if (response.ok) {
          const data = await response.json();
          const {
            users,
            roles,
            loggedInUserId: fetchedLoggedInUserId,
            selectedProjectId: fetchedSelectedProjectId,
          } = data;

          // store loggedInUserId globally to use in submitModal
          loggedInUserId = fetchedLoggedInUserId;
          selectedProjectId = fetchedSelectedProjectId;

          // dropdown with usernames
          const usernameSelect = document.getElementById("username");
          usernameSelect.innerHTML =
            "<option disabled selected>Select a user</option>";
          console.log("users are:", users);

          users.forEach((user) => {
            if (
              user.user_id !== loggedInUserId &&
              user.role_scope !== "organization"
            ) {
              const option = document.createElement("option");
              option.value = user.user_id;
              option.textContent = user.username;
              usernameSelect.appendChild(option);
            }
          });

          // dropdown with roles
          const userroleSelect = document.getElementById("userrole");
          userroleSelect.innerHTML =
            "<option disabled selected>Select a role</option>";
          console.log("roles are:", roles);

          roles
            .filter((role) => role.role_scope === "project") // filter roles based on role_scope
            .forEach((role) => {
              const option = document.createElement("option");
              option.value = role.role_id;
              option.textContent = role.role_name;
              userroleSelect.appendChild(option);
            });
        } else {
          console.error("Failed to fetch user and role data");
        }
      } catch (error) {
        console.error("Error:", error);
      }

      // open modal
      document.getElementById("modal").style.display = "flex";
    }

    //submit main model
    function submitModal() {
      const userSelect = document.getElementById("username");
      const roleSelect = document.getElementById("userrole");

      const user_id = userSelect.value;
      const role_id = roleSelect.value;

      if (user_id === "Select a user" || role_id === "Select a role") {
        console.warn("Please select both a valid user and role.");
        toastr.warning("Please select a valid user and role before submitting")
        return;
      }

      const data = {
        user_id: user_id,
        role_id: role_id,
        loggedInUserId: loggedInUserId,
        selectedProjectId: selectedProjectId,
      };

      fetch("/postUser_roles", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(data),
      })
        .then((response) => response.json())
        .then((data) => {
          if (data.success) {
            console.log("Success:", data);
            toastr.success(data.message)
            closeModal();
            location.reload(); // reload the current page
          } else {
            console.log("Error:", data);
            toastr.error(data.message)
          }
        })
        .catch((error) => {
          console.error("Error:", error);
          toastr.error(error)
        });
    }

    function closeModal() {
      //close main model
      // document.getElementById("modal").classList.add("hidden");
      document.getElementById("modal").style.display = "none";
    }
  </script>

  <!-- form submission alert -->



</body>

</html>