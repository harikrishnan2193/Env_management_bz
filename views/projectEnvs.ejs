<!DOCTYPE html>
<html lang="en">
  <head>
    <%- include('partials/head', { title: "ENVS"}) %>

    <style>
      .modal {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100vh;
        background: rgba(0, 0, 0, 0.5);
        justify-content: center;
        align-items: center;
      }

      .modal-content {
        background: #fff;
        padding: 20px;
        border-radius: 8px;
        width: 300px;
        max-width: 90%;
        text-align: center;
      }

      .hidden {
        display: none;
      }

      #selectedOption {
        margin: 0 !important;
        padding: 0 !important;
      }

      .env-preview,
      .env-textarea {
        font-family: monospace;
        font-size: 1rem;
        line-height: 1.5;
        padding: 1rem;
        white-space: pre-wrap;
        word-wrap: break-word;
        overflow: auto;
      }

      .env-preview {
        position: absolute;
        top: 0;
        left: 0;
        z-index: 1;
        color: black;
      }

      .env-textarea {
        position: absolute;
        top: 0;
        left: 0;
        z-index: 2;
        color: transparent;
        caret-color: black;
        background: none;
        border: none;
        resize: none;
      }
    </style>

    <!-- Highlight.js css -->
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/atom-one-dark.min.css"
    />
  </head>

  <body>
    <%- include('partials/loading-indicator') %>

    <!-- SIDEBAR SECTION -->
    <section class="">
      <%- include('side', { roleDetails: roleDetails }) %>
    </section>

    <div class="min-h-screen flex gap-1">
      <!-- CONTENT SECTION -->
      <section class="relative flex-1 z-10">
        <div class="flex flex-col items-center justify-center space-y-6 mt-10">
          <!-- back to project -->
          <a
            href="/projects"
            class="text-light_grey absolute top-3 z-0 hover:text-primary"
          >
            <i class="fa-solid fa-arrow-left"></i>&nbsp;&nbsp;<span
              >Back to project</span
            >
          </a>

          <form
            id="projectEnvForm"
            action="/project/env_type/envs"
            method="GET"
            class="text-secondary"
          >
            <select
              id="options"
              name="env_id"
              class="w-72 px-2 py-1 bg-light_grey rounded-md focus:outline-none focus:ring-2 focus:ring-primary capitalize"
              onchange="this.form.submit()"
            >
              <option value="" disabled selected>Select Env</option>
              <% envStatus.forEach(project=> { %>
              <option value="<%= project.env_id %>">
                <%= project.env_type %>
              </option>
              <% }) %>
            </select>
          </form>

          <!-- Container -->
          <div
            class="xs:w-11/12 sm:w-10/12 lg:w-7/12 bg-medium_grey p-2 sm:p-6 shadow-lg rounded-lg relative text-secondary"
          >
            <h2
              class="text-xl md:text-2xl font-bold mb-2 sm:mb-4 text-center"
            >
              Env Types
            </h2>

            <!-- Form to handle environment updates -->
            <form action="/project/updateEnvs" method="POST" id="envForm">
              <% if (allEnvs && allEnvs.length > 0) { %>
                <% allEnvs.forEach(env => { %>
                  <% 
                    let placeholderText = '';
                    if (typeof canEdit !== 'undefined' && canEdit) {
                      placeholderText = 'No env available. Type here...';
                    } else if (typeof canView !== 'undefined' && canView) {
                      placeholderText = 'No env available';
                    } else {
                      placeholderText = 'No access to view content';
                    }
                    const readonlyAttribute = (typeof canEdit !== 'undefined' && canEdit) ? '' : 'readonly';
                  %>
                  <div class="bg-medium_grey p-4 rounded-lg mb-5 h-60 shadow-inner min-h-[650px] relative">
                    <pre 
                      class="hljs env-preview w-full h-full bg-secondary rounded-lg p-4 overflow-auto"
                    ></pre>
                    <textarea 
                      spellcheck="false"
                      name="env_content" 
                      class="env-textarea w-full h-full bg-transparent border-none p-4 resize-none text-transparent caret-white focus:outline-none"
                      <%= readonlyAttribute %>
                      placeholder="<%= placeholderText %>"><%- (typeof canView !== 'undefined' && canView) || (typeof canEdit !== 'undefined' && canEdit) ? (env.env_content.trim() || '') : '' %></textarea>
                  </div>
                <% }) %>
              <% } else { %>
                <% 
                  let placeholderText = '';
                  if (typeof canEdit !== 'undefined' && canEdit) {
                    placeholderText = 'No env available. Type here...';
                  } else if (typeof canView !== 'undefined' && canView) {
                    placeholderText = 'No env available';
                  } else {
                    placeholderText = 'No access to view content';
                  }
                  const readonlyAttribute = (typeof canEdit !== 'undefined' && canEdit) ? '' : 'readonly';
                %>
                <div class="bg-medium_grey p-4 rounded-lg mb-5 h-60 shadow-inner min-h-[650px] relative">
                  <pre 
                    class="hljs env-preview w-full h-full bg-secondary rounded-lg p-4 overflow-auto"
                  ></pre>
                  <textarea 
                    spellcheck="false"
                    name="env_content" 
                    class="env-textarea w-full h-full bg-transparent border-none p-4 resize-none text-transparent caret-white focus:outline-none"
                    <%= readonlyAttribute %>
                    placeholder="<%= placeholderText %>"></textarea>
                </div>
              <% } %>
            
              <!-- Submit Button -->
              <div class="text-center mb-2">
                <button 
                  type="submit" 
                  class="w-full bg-primary text-light_grey font-bold rounded-md py-2 hover:bg-primary_hover" 
                  <%= (typeof canEdit !== 'undefined' && !canEdit) ? 'disabled' : '' %>>
                  Save Env
                </button>
              </div>
            </form> 
          </div>
        </div>
      </section>
    </div>

    <!-- Highlight.js functionality -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js"></script>
    <script>
      hljs.highlightAll();
    </script>
    <script>
      document.addEventListener("DOMContentLoaded", () => {
        const textareas = document.querySelectorAll(".env-textarea");

        textareas.forEach((textarea) => {
          const pre = textarea.previousElementSibling;

          // Function to update and reapply syntax highlighting
          const updateHighlight = () => {
            pre.textContent = textarea.value; // Update content in <pre>
            hljs.highlightElement(pre); // Reapply highlight.js styling
          };

          // Update highlight on input
          textarea.addEventListener("input", () => {
            updateHighlight();
          });

          // Sync scrolling between textarea and pre
          textarea.addEventListener("scroll", () => {
            pre.scrollTop = textarea.scrollTop;
            pre.scrollLeft = textarea.scrollLeft;
          });

          // Initialize highlighting on load
          updateHighlight();
        });
      });
    </script>

    <!-- alert messages -->
    <script>
      const error =  <%- JSON.stringify(error) %>;
      const success =  <%- JSON.stringify(success) %>;

      // success and error message using toastr
      toastr.options = {
        timeOut: "2000",
      };

      if (success && success.length > 0) {
        toastr.success(success[0]);
      }

      if (error && error.length > 0) {
        toastr.error(error[0]);
      }
    </script>

    <!-- save the selected option inside local storage so when it refreshes we can get it from session storage -->
    <script>
      const select = document.getElementById("options");

      // Load the previously selected option from sessionStorage
      const savedEnvId = sessionStorage.getItem("selectedEnvId");
      if (savedEnvId) {
        select.value = savedEnvId;
      }

      // Save the selected option to sessionStorage on change
      select.addEventListener("change", (event) => {
        sessionStorage.setItem("selectedEnvId", event.target.value);
      });
    </script>

    <script>
      document
        .querySelector("#projectEnvForm")
        .addEventListener("change", (event) => {
          pageLoadingIndicator.classList.remove("hidden");
        });
    </script>

    <script src="/js/loading-indicator.js"></script>
  </body>
</html>
